{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1Dj4v2tdfnpl1wqDaebp742vjmb4q5Ub1","authorship_tag":"ABX9TyOxmjIyAurschxDUWARlIi8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","df = pd.read_csv('creditcard_sampledata_2.csv')\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"4OxRGYicUt8h","executionInfo":{"status":"ok","timestamp":1760472908875,"user_tz":-60,"elapsed":110,"user":{"displayName":"Matt Pike (11pike)","userId":"14601210248165278381"}},"outputId":"9b0e1855-6601-4a95-877f-9d2c89ae32ac"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0        V1        V2        V3        V4        V5        V6  \\\n","0      221547 -1.191668  0.428409  1.640028 -1.848859 -0.870903 -0.204849   \n","1      184524  1.966614 -0.450087 -1.228586  0.142873 -0.150627 -0.543590   \n","2       91201  1.528452 -1.296191 -0.890677 -2.504028  0.803202  3.350793   \n","3       26115 -0.774614  1.100916  0.679080  1.034016  0.168633  0.874582   \n","4      201292 -1.075860  1.361160  1.496972  2.242604  1.314751  0.272787   \n","\n","         V7        V8        V9  ...       V21       V22       V23       V24  \\\n","0 -0.385675  0.352793 -1.098301  ...  0.507173  1.292565 -0.467752  1.244887   \n","1 -0.076217 -0.108390  0.973310  ...  0.124055  0.564916 -0.039331 -0.283904   \n","2 -1.633016  0.815350 -1.884692  ... -0.412088 -1.017485  0.129566  0.948048   \n","3  0.209454  0.770550 -0.558106  ...  0.011158  0.146017 -0.130401 -0.848815   \n","4  1.005246  0.132932 -1.558317  ...  0.254485  0.530692 -0.651119  0.626389   \n","\n","        V25       V26       V27       V28  Amount  Class  \n","0  0.697707  0.059375 -0.319964 -0.017444   27.44      0  \n","1  0.186400  0.192932 -0.039155 -0.071314   35.95      0  \n","2  0.287826 -0.396592  0.042997  0.025853   28.40      0  \n","3  0.005698 -0.183295  0.282940  0.123856   43.20      0  \n","4  1.040212  0.249501 -0.146745  0.029714   10.59      0  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-97088a05-d460-4d0c-8f55-3f50ba9ce2db\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>V1</th>\n","      <th>V2</th>\n","      <th>V3</th>\n","      <th>V4</th>\n","      <th>V5</th>\n","      <th>V6</th>\n","      <th>V7</th>\n","      <th>V8</th>\n","      <th>V9</th>\n","      <th>...</th>\n","      <th>V21</th>\n","      <th>V22</th>\n","      <th>V23</th>\n","      <th>V24</th>\n","      <th>V25</th>\n","      <th>V26</th>\n","      <th>V27</th>\n","      <th>V28</th>\n","      <th>Amount</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>221547</td>\n","      <td>-1.191668</td>\n","      <td>0.428409</td>\n","      <td>1.640028</td>\n","      <td>-1.848859</td>\n","      <td>-0.870903</td>\n","      <td>-0.204849</td>\n","      <td>-0.385675</td>\n","      <td>0.352793</td>\n","      <td>-1.098301</td>\n","      <td>...</td>\n","      <td>0.507173</td>\n","      <td>1.292565</td>\n","      <td>-0.467752</td>\n","      <td>1.244887</td>\n","      <td>0.697707</td>\n","      <td>0.059375</td>\n","      <td>-0.319964</td>\n","      <td>-0.017444</td>\n","      <td>27.44</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>184524</td>\n","      <td>1.966614</td>\n","      <td>-0.450087</td>\n","      <td>-1.228586</td>\n","      <td>0.142873</td>\n","      <td>-0.150627</td>\n","      <td>-0.543590</td>\n","      <td>-0.076217</td>\n","      <td>-0.108390</td>\n","      <td>0.973310</td>\n","      <td>...</td>\n","      <td>0.124055</td>\n","      <td>0.564916</td>\n","      <td>-0.039331</td>\n","      <td>-0.283904</td>\n","      <td>0.186400</td>\n","      <td>0.192932</td>\n","      <td>-0.039155</td>\n","      <td>-0.071314</td>\n","      <td>35.95</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>91201</td>\n","      <td>1.528452</td>\n","      <td>-1.296191</td>\n","      <td>-0.890677</td>\n","      <td>-2.504028</td>\n","      <td>0.803202</td>\n","      <td>3.350793</td>\n","      <td>-1.633016</td>\n","      <td>0.815350</td>\n","      <td>-1.884692</td>\n","      <td>...</td>\n","      <td>-0.412088</td>\n","      <td>-1.017485</td>\n","      <td>0.129566</td>\n","      <td>0.948048</td>\n","      <td>0.287826</td>\n","      <td>-0.396592</td>\n","      <td>0.042997</td>\n","      <td>0.025853</td>\n","      <td>28.40</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>26115</td>\n","      <td>-0.774614</td>\n","      <td>1.100916</td>\n","      <td>0.679080</td>\n","      <td>1.034016</td>\n","      <td>0.168633</td>\n","      <td>0.874582</td>\n","      <td>0.209454</td>\n","      <td>0.770550</td>\n","      <td>-0.558106</td>\n","      <td>...</td>\n","      <td>0.011158</td>\n","      <td>0.146017</td>\n","      <td>-0.130401</td>\n","      <td>-0.848815</td>\n","      <td>0.005698</td>\n","      <td>-0.183295</td>\n","      <td>0.282940</td>\n","      <td>0.123856</td>\n","      <td>43.20</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>201292</td>\n","      <td>-1.075860</td>\n","      <td>1.361160</td>\n","      <td>1.496972</td>\n","      <td>2.242604</td>\n","      <td>1.314751</td>\n","      <td>0.272787</td>\n","      <td>1.005246</td>\n","      <td>0.132932</td>\n","      <td>-1.558317</td>\n","      <td>...</td>\n","      <td>0.254485</td>\n","      <td>0.530692</td>\n","      <td>-0.651119</td>\n","      <td>0.626389</td>\n","      <td>1.040212</td>\n","      <td>0.249501</td>\n","      <td>-0.146745</td>\n","      <td>0.029714</td>\n","      <td>10.59</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97088a05-d460-4d0c-8f55-3f50ba9ce2db')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-97088a05-d460-4d0c-8f55-3f50ba9ce2db button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-97088a05-d460-4d0c-8f55-3f50ba9ce2db');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-fa38da3d-24eb-4a36-a8f7-ecfaa5f1ba5e\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fa38da3d-24eb-4a36-a8f7-ecfaa5f1ba5e')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-fa38da3d-24eb-4a36-a8f7-ecfaa5f1ba5e button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["X = df.drop('Class', axis=1)\n","y = df['Class']"],"metadata":{"id":"fIssu_ydYUSE","executionInfo":{"status":"ok","timestamp":1760473217089,"user_tz":-60,"elapsed":13,"user":{"displayName":"Matt Pike (11pike)","userId":"14601210248165278381"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["**Natural Accuracy**\n","\n","Traditional rules based method of detecting fraud"],"metadata":{"id":"_MfmVirwXbCL"}},{"cell_type":"code","source":["# Count the total number of observations from the length of y\n","total_obs = len(y)\n","\n","# Count the total number of non-fraudulent observations\n","non_fraud = [i for i in y if i == 0]\n","count_non_fraud = non_fraud.count(0)\n","\n","# Calculate the percentage of non fraud observations in the dataset\n","percentage = (float(count_non_fraud)/float(total_obs)) * 100\n","\n","# Print the percentage: this is our \"natural accuracy\" by doing nothing\n","print(percentage)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ovKC916jXrch","executionInfo":{"status":"ok","timestamp":1760473094202,"user_tz":-60,"elapsed":80,"user":{"displayName":"Matt Pike (11pike)","userId":"14601210248165278381"}},"outputId":"d7b8b24c-ec80-42ae-e0d8-5c0153911697"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["95.8904109589041\n"]}]},{"cell_type":"markdown","source":["**Random Forest Classifier**"],"metadata":{"id":"NEQSitw6YCNo"}},{"cell_type":"code","source":["# Import the random forest model from sklearn\n","import sklearn\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","\n","# Split your data into training and test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n","\n","# Define the model as the random forest\n","model = RandomForestClassifier(random_state=5)\n","\n","# Fit the model to our training set\n","model.fit(X_train, y_train)\n","\n","# Obtain predictions from the test data\n","predicted = model.predict(X_test)"],"metadata":{"id":"10TQh8NVYHpH","executionInfo":{"status":"ok","timestamp":1760473385504,"user_tz":-60,"elapsed":6703,"user":{"displayName":"Matt Pike (11pike)","userId":"14601210248165278381"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# evaluate random forest model\n","from sklearn.metrics import confusion_matrix, classification_report, roc_curve\n","\n","# Confusion Matrix\n","conf_matrix = confusion_matrix(y_test, predicted)\n","print(\"Confusion Matrix:\")\n","print(conf_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Co2PyPeiZKih","executionInfo":{"status":"ok","timestamp":1760473821420,"user_tz":-60,"elapsed":10,"user":{"displayName":"Matt Pike (11pike)","userId":"14601210248165278381"}},"outputId":"d78e26d6-9ef5-45fc-ba0d-9c61e4e16ef8"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[2098    1]\n"," [  18   73]]\n"]}]},{"cell_type":"code","source":["# Classification Report\n","class_report = classification_report(y_test, predicted)\n","print(\"Classification Report:\")\n","print(class_report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MDQQwtutZd1k","executionInfo":{"status":"ok","timestamp":1760473723203,"user_tz":-60,"elapsed":47,"user":{"displayName":"Matt Pike (11pike)","userId":"14601210248165278381"}},"outputId":"c972b413-4494-4394-b4b6-99f7cbd1e38d"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.99      1.00      1.00      2099\n","           1       0.99      0.80      0.88        91\n","\n","    accuracy                           0.99      2190\n","   macro avg       0.99      0.90      0.94      2190\n","weighted avg       0.99      0.99      0.99      2190\n","\n"]}]},{"cell_type":"code","source":["roc_curve = roc_curve(y_test, predicted)\n","print(\"ROC Curve:\")\n","print(roc_curve)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":207},"id":"AbG5F7cXZq8K","executionInfo":{"status":"error","timestamp":1760473841138,"user_tz":-60,"elapsed":46,"user":{"displayName":"Matt Pike (11pike)","userId":"14601210248165278381"}},"outputId":"4992f7fd-d241-4201-99cb-a46daf9b5c1a"},"execution_count":22,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"'tuple' object is not callable","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-804416868.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mroc_curve\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mroc_curve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ROC Curve:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mroc_curve\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mroc_auc_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroc_auc_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'tuple' object is not callable"]}]},{"cell_type":"code","source":["# Feature Importance\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","importances = model.feature_importances_\n","indices = np.argsort(importances)[::-1]\n","\n","plt.figure()\n","plt.title(\"Feature Importances\")\n","plt.bar(range(X.shape[1]), importances[indices], color=\"r\", align=\"center\")\n","plt.xticks(range(X.shape[1]), [y[i] for i in indices], rotation=90)\n","plt.xlim([-1, X.shape[1]])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"V7DxVFyLZsnL","executionInfo":{"status":"ok","timestamp":1760473949312,"user_tz":-60,"elapsed":260,"user":{"displayName":"Matt Pike (11pike)","userId":"14601210248165278381"}},"outputId":"c23cb542-c17c-4ec5-a65c-373aef514ee9"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}